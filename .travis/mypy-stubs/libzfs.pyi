# Stubs for libzfs (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import enum
from datetime import date
from typing import Any, Generator, List, Dict, Optional, Union, Set


class SendFlag(enum.Enum):
    VERBOSE = 0
    REPLICATE = 1
    DOALL = 2
    FROMORIGIN = 3
    DEDUP = 3
    PROPS = 4
    DRYRUN = 5
    PARSABLE = 6
    PROGRESS = 7
    LARGEBLOCK = 8
    EMBED_DATA = 9


DatasetType = ... # type: Any
DiffFileType = ... # type: Any
DiffRecordType = ... # type: Any
Error = ... # type: Any
FeatureState = ... # type: Any
PoolState = ... # type: Any
PoolStatus = ... # type: Any
PropertySource = ... # type: Any
ScanFunction = ... # type: Any
ScanState = ... # type: Any
SendFlags = ... # type: Set[SendFlag]
VDevAuxState = ... # type: Any
VDevState = ... # type: Any
ZFS_PROPERTY_CONVERTERS = ... # type: Any
ZIOType = ... # type: Any
ZPOOL_PROPERTY_CONVERTERS = ... # type: Any
collections = ... # type: Any
errno = ... # type: Any
numbers = ... # type: Any
os = ... # type: Any
stat = ... # type: Any
threading = ... # type: Any

# def __pyx_unpickle_ZFSProperty(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZFSPropertyDict(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZFSUserProperty(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZFSVdev(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZFSVdevStats(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZPoolProperty(*args, **kwargs): ...  # noqa: T499
# def __pyx_unpickle_ZPoolScrub(*args, **kwargs): ...  # noqa: T499
def clear_label(device: str) -> None: ...
def nicestrtonum(zfs: ZFS, value: Union[int, str]) -> int: ...
def parse_zfs_prop(
    prop: str,
    value: Any
) -> Optional[Union[str, int, bool]]: ...
def parse_zpool_prop(
    prop: str,
    value: Any
) -> Optional[Union[str, int, bool]]: ...
def read_label(device: str) -> Dict[str, str]: ...
def serialize_zfs_prop(prop: str, value: Any) -> str: ...
def serialize_zpool_prop(prop: str, value: Any) -> str: ...
def vdev_label_offset(psize: int, l: int, offset: int) -> int: ...

class DiffRecord:
    __init__ = ... # type: Any
    __getstate__ = ... # type: Any

class ZFS:
    datasets = ... # type: Any
    errno = ... # type: Any
    errstr = ... # type: Any
    pools: Generator[ZFSPool, None, None] = ...
    snapshots: Generator[ZFSSnapshot, None, None] = ...
    __pyx_vtable__ = ... # type: Any
    def __init__(self, history: bool=True, history_prefix: str='') -> None: ...
    def create(
        self,
        name: str,
        topology: Any,
        opts: Dict[str, str],
        fsopts: Dict[str, str]
    ) -> str: ...
    def describe_resume_token(self, token: str) -> Dict[Any, Any]: ...
    def destroy(self, name: str) -> None: ...
    # def export_pool(self, *args, **kwargs): ...
    # def find_import(self, *args, **kwargs): ...
    # def generate_history_opts(self, *args, **kwargs): ...
    def get(self, name: str) -> ZFSPool: ...
    def get_dataset(self, name: str) -> ZFSDataset: ...
    def get_dataset_by_path(self, path: str) -> ZFSDataset: ...
    def get_object(self, name: str) -> ZFSDataset: ...
    def get_snapshot(self, name: str) -> ZFSSnapshot: ...
    # def history_vdevs_list(self, *args, **kwargs): ...
    def import_pool(
        self,
        pool: ZFSImportablePool,
        newname: str,
        opts: Dict[str, Any],
        missing_log: bool=False
    ) -> ZFSPool: ...
    def receive(
        self,
        name: str,
        fd: int,
        force: bool=False,
        nomount: bool=False,
        resumable: bool=False,
        props: Optional[Dict[Any, Any]]=None,
        limitds: Optional[Dict[Any, Any]]=None,
    ) -> None: ...
    # def send_resume(
    #     self,
    #     fd: int,
    #     token,
    #     flags=None
    # ): ...
    # def write_history(self, *args, **kwargs): ...
    # def __getstate__(self): ...
    # def __reduce_cython__(self, *args, **kwargs): ...
    # def __setstate_cython__(self, *args, **kwargs): ...

# class ZFSBookmark(ZFSObject):
#     bookmark_name = ... # type: str
#     parent = ... # type: Any
#     def __init__(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

class ZFSDataset(ZFSObject):
    bookmarks = ... # type: Any
    children: Generator[ZFSDataset, None, None] = ...
    children_recursive = ... # type: Any
    dependents = ... # type: Any
    mountpoint: str = ...
    snapshots: Generator[ZFSSnapshot, None, None]= ...
    snapshots_recursive = ... # type: Any
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def destroy_snapshot(self, name: str) -> None: ...
    def diff(
        self,
        fromsnap: str,
        tosnap: str
    ) -> Generator[DiffRecord, None, None]: ...
    # def get_send_progress(self, *args, **kwargs): ...
    def mount(self) -> None: ...
    def mount_recursive(self, ignore_errors: bool=False) -> None: ...
    def promote(self) -> None: ...
    def receive(
        self,
        fd: int,
        force: bool=False,
        nomount: bool=False,
        resumable: bool=False,
        props: Optional[Dict[Any, Any]]=None,
        limitds: Optional[Dict[Any, Any]]=None
    ) -> None: ...
    def send(
        self,
        fd: int,
        fromname: Optional[str]=None,
        toname: Optional[str]=None,
        flags: Set[str]=set()
    ) -> None: ...
    def snapshot(
        self,
        name: str, 
        fsopts: Optional[Dict[str, str]]=None,
        recursive: bool=False
    ) -> None: ...
    def umount(self, force: bool=False) -> None: ...
    def umount_recursive(self, force: bool=False) -> None: ...
    def __getstate__(self) -> Any: ...

class ZFSException(RuntimeError):
    __init__ = ... # type: Any

class ZFSImportablePool(ZFSPool):
    config = ... # type: Any
    error_count = ... # type: Any
    features = ... # type: Any
    name: str = ...
    properties: Dict[str, ZFSProperty] = ...
    root_dataset: ZFSDataset = ...
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def attach_vdev(self, vdev: Any) -> None: ...
    def create(self, *args: Any, **kwargs: Any) -> None: ...
    def destroy(self, name: str) -> None: ...

class ZFSObject:
    name: str = ...
    pool: ZFSPool = ...
    properties: Dict[str, ZFSProperty] = ...
    root = ... # type: Any
    type = ... # type: Any
    def __init__(self) -> None: ...
    def delete(self, defer: bool=False) -> None: ...
    def get_send_space(self, fromname: Optional[str]) -> Any: ...
    def rename(
        self,
        new_name: str,
        nounmount: bool=False,
        forceunmount: bool=False
    ) -> None: ...
    def __getstate__(self) -> Dict[str, str]: ...

class ZFSPool:
    cache_vdevs = ... # type: Any
    config = ... # type: Any
    data_vdevs = ... # type: Any
    disks = ... # type: Any
    error_count = ... # type: Any
    features = ... # type: Any
    groups = ... # type: Any
    guid = ... # type: Any
    hostname = ... # type: str
    log_vdevs = ... # type: Any
    name: str = ...
    properties: Dict[str, ZFSProperty] = ...
    root = ... # type: Any
    root_dataset: ZFSDataset = ...
    root_vdev = ... # type: Any
    scrub = ... # type: Any
    spare_vdevs = ... # type: Any
    state = ... # type: Any
    status = ... # type: Any
    __pyx_vtable__ = ... # type: Any
    def __init__(self) -> None: ...
    # def attach_vdevs(self, *args, **kwargs): ...
    def clear(self) -> bool: ...
    def create(
        self,
        name: str,
        fsopts: Dict[str, Any],
        fstype: int=DatasetType.FILESYSTEM,
        sparse_vol: bool=False,
        create_ancestors: bool=False
    ) -> None: ...
    def delete(self) -> None: ...
    def start_scrub(self) -> None: ...
    def stop_scrub(self) -> None: ...
    def upgrade(self) -> None: ...
    # def vdev_by_guid(self, *args, **kwargs): ...
    # def __getstate__(self): ...

class ZFSProperty:
    allowed_values = ... # type: Any
    dataset: ZFSDataset = ...
    name: str = ...
    parsed = ... # type: Any
    rawvalue = ... # type: Any
    source = ... # type: Any
    value: str = ...
    def __init__(self) -> None: ...
    def inherit(self, recursive: bool=False, received: bool=False) -> None: ...
    def refresh(self) -> None: ...
    def __getstate__(self) -> Dict[str, str]: ...

# class ZFSPropertyDict(dict):
#     def __init__(self, *args, **kwargs) -> None: ...
#     def get(self, *args, **kwargs) -> ZFSProperty: ...
#     def has_key(self, *args, **kwargs): ...
#     def items(self, *args, **kwargs): ...
#     def iterkeys(self, *args, **kwargs): ...
#     def itervalues(self, *args, **kwargs): ...
#     def keys(self, *args, **kwargs): ...
#     def refresh(self) -> None: ...
#     def setdefault(self, *args, **kwargs): ...
#     def update(self, *args, **kwargs): ...
#     def values(self, *args, **kwargs): ...
#     def __contains__(self, *args, **kwargs): ...
#     def __delitem__(self, *args, **kwargs): ...
#     def __getitem__(self, index): ...
#     def __iter__(self): ...
#     def __reduce__(self): ...
#     def __setitem__(self, index, object): ...
#     def __setstate__(self, state): ...

class ZFSSnapshot(ZFSObject):
    holds = ... # type: Any
    mountpoint: str = ...
    parent = ... # type: Any
    snapshot_name: str = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def bookmark(self, name: str) -> None: ...
    def clone(
        self,
        name: str,
        opts: Optional[Dict[str, str]]=None
    ) -> None: ...
    def delete(self, recursive: bool=False) -> None: ...
    def hold(self, tag: str, recursive: bool=False) -> None: ...
    def release(self, tag: str, recursive: bool=False) -> None: ...
    def rollback(self, force: bool=False) -> None: ...
    def send(
        self,
        fd: int,
        fromname: Optional[str]=None,
        flags: Set[str]=set()
    ) -> None: ...
    def __getstate__(self) -> Dict[str, str]: ...

class ZFSUserProperty(ZFSProperty):
    name: str = ...
    rawvalue = ... # type: Any
    source = ... # type: Any
    value: str = ...
    def __init__(self, value: Optional[Any]) -> None: ...

# class ZFSVdev:
#     children = ... # type: Any
#     disks = ... # type: Any
#     group = ... # type: Any
#     guid = ... # type: Any
#     parent = ... # type: Any
#     path = ... # type: Any
#     root = ... # type: Any
#     size = ... # type: Any
#     stats = ... # type: Any
#     status = ... # type: Any
#     type = ... # type: Any
#     zpool = ... # type: Any
#     def __init__(self, *args, **kwargs): ...
#     def add_child_vdev(self, *args, **kwargs): ...
#     def attach(self, *args, **kwargs): ...
#     def degrade(self, *args, **kwargs): ...
#     def detach(self, *args, **kwargs): ...
#     def fault(self, *args, **kwargs): ...
#     def offline(self, *args, **kwargs): ...
#     def online(self, *args, **kwargs): ...
#     def remove(self, *args, **kwargs): ...
#     def replace(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

# class ZFSVdevStats:
#     allocated = ... # type: Any
#     bytes = ... # type: Any
#     checksum_errors = ... # type: Any
#     configured_ashift = ... # type: Any
#     fragmentation = ... # type: Any
#     logical_ashift = ... # type: Any
#     ops = ... # type: Any
#     physical_ashift = ... # type: Any
#     read_errors = ... # type: Any
#     size = ... # type: Any
#     timestamp = ... # type: Any
#     vdev = ... # type: Any
#     write_errors = ... # type: Any
#     def __init__(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

# class ZPoolFeature:
#     description = ... # type: Any
#     guid = ... # type: Any
#     name: str = ...
#     pool: ZFSPool = ...
#     state = ... # type: Any
#     def __init__(self, *args, **kwargs): ...
#     def enable(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

# class ZPoolProperty:
#     allowed_values = ... # type: Any
#     name: str = ...
#     parsed = ... # type: Any
#     pool = ... # type: Any
#     rawvalue = ... # type: Any
#     source = ... # type: Any
#     value: str = ...
#     def __init__(self, *args, **kwargs): ...
#     def reset(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

# class ZPoolScrub:
#     bytes_scanned = ... # type: Any
#     bytes_to_scan = ... # type: Any
#     end_time = ... # type: Any
#     errors = ... # type: Any
#     function = ... # type: Any
#     percentage = ... # type: Any
#     pool = ... # type: Any
#     root = ... # type: Any
#     start_time = ... # type: Any
#     stat = ... # type: Any
#     state = ... # type: Any
#     def __init__(self, *args, **kwargs): ...
#     def __getstate__(self): ...
#     def __reduce_cython__(self, *args, **kwargs): ...
#     def __setstate_cython__(self, *args, **kwargs): ...

# class ZfsConverter:
#     __init__ = ... # type: Any
#     to_native = ... # type: Any
#     to_property = ... # type: Any
