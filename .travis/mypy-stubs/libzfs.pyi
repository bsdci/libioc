# Stubs for libzfs (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from datetime import date
from typing import Any, Generator, List, Dict, Optional

DatasetType = ... # type: Any
DiffFileType = ... # type: Any
DiffRecordType = ... # type: Any
Error = ... # type: Any
FeatureState = ... # type: Any
PoolState = ... # type: Any
PoolStatus = ... # type: Any
PropertySource = ... # type: Any
ScanFunction = ... # type: Any
ScanState = ... # type: Any
SendFlag = ... # type: Any
SendFlags = ... # type: Any
VDevAuxState = ... # type: Any
VDevState = ... # type: Any
ZFS_PROPERTY_CONVERTERS = ... # type: Any
ZIOType = ... # type: Any
ZPOOL_PROPERTY_CONVERTERS = ... # type: Any
collections = ... # type: Any
enum = ... # type: Any
errno = ... # type: Any
numbers = ... # type: Any
os = ... # type: Any
stat = ... # type: Any
threading = ... # type: Any

def __pyx_unpickle_ZFSProperty(*args, **kwargs): ...
def __pyx_unpickle_ZFSPropertyDict(*args, **kwargs): ...
def __pyx_unpickle_ZFSUserProperty(*args, **kwargs): ...
def __pyx_unpickle_ZFSVdev(*args, **kwargs): ...
def __pyx_unpickle_ZFSVdevStats(*args, **kwargs): ...
def __pyx_unpickle_ZPoolProperty(*args, **kwargs): ...
def __pyx_unpickle_ZPoolScrub(*args, **kwargs): ...
def clear_label(*args, **kwargs): ...
def nicestrtonum(*args, **kwargs): ...
def parse_zfs_prop(*args, **kwargs): ...
def parse_zpool_prop(*args, **kwargs): ...
def read_label(*args, **kwargs): ...
def serialize_zfs_prop(*args, **kwargs): ...
def serialize_zpool_prop(*args, **kwargs): ...
def vdev_label_offset(*args, **kwargs): ...

class DiffRecord:
    __init__ = ... # type: Any
    __getstate__ = ... # type: Any

class ZFS:
    datasets = ... # type: Any
    errno = ... # type: Any
    errstr = ... # type: Any
    pools: Generator[ZFSPool, None, None] = ...
    snapshots: Generator[ZFSSnapshot, None, None] = ...
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def create(self, *args, **kwargs): ...
    def describe_resume_token(self, *args, **kwargs): ...
    def destroy(self, name: str) -> None: ...
    def export_pool(self, *args, **kwargs): ...
    def find_import(self, *args, **kwargs): ...
    def generate_history_opts(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...
    def get_dataset(self, name: str) -> ZFSDataset: ...
    def get_dataset_by_path(self, *args, **kwargs) -> ZFSDataset: ...
    def get_object(self, *args, **kwargs): ...
    def get_snapshot(self, name: str) -> ZFSSnapshot: ...
    def history_vdevs_list(self, *args, **kwargs): ...
    def import_pool(self, *args, **kwargs): ...
    def receive(self, *args, **kwargs): ...
    def send_resume(self, *args, **kwargs): ...
    def write_history(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSBookmark(ZFSObject):
    bookmark_name = ... # type: str
    parent = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSDataset(ZFSObject):
    bookmarks = ... # type: Any
    children: Generator[ZFSDataset, None, None] = ...
    children_recursive = ... # type: Any
    dependents = ... # type: Any
    mountpoint: str = ...
    snapshots: Generator[ZFSSnapshot, None, None]= ...
    snapshots_recursive = ... # type: Any
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def destroy_snapshot(self, *args, **kwargs): ...
    def diff(self, *args, **kwargs): ...
    def get_send_progress(self, *args, **kwargs): ...
    def mount(self, *args, **kwargs) -> None: ...
    def mount_recursive(self, *args, **kwargs) -> None: ...
    def promote(self, *args, **kwargs): ...
    def receive(self, *args, **kwargs): ...
    def send(self, *args, **kwargs): ...
    def snapshot(
        self,
        name: str, 
        fsopts: Optional[Dict[str, str]],
        recursive: bool=False
    ) -> None: ...
    def umount(self, *args, **kwargs) -> None: ...
    def umount_recursive(self, *args, **kwargs) -> None: ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSException(RuntimeError):
    __init__ = ... # type: Any

class ZFSImportablePool(ZFSPool):
    config = ... # type: Any
    error_count = ... # type: Any
    features = ... # type: Any
    name: str = ...
    properties: Dict[str, ZFSProperty] = ...
    root_dataset: ZFSDataset = ...
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def attach_vdev(self, *args, **kwargs): ...
    def create(self, *args, **kwargs): ...
    def destroy(self, *args, **kwargs): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSObject:
    name: str = ...
    pool: ZFSPool = ...
    properties: Dict[str, ZFSProperty] = ...
    root = ... # type: Any
    type = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs) -> None: ...
    def get_send_space(self, *args, **kwargs): ...
    def rename(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSPool:
    cache_vdevs = ... # type: Any
    config = ... # type: Any
    data_vdevs = ... # type: Any
    disks = ... # type: Any
    error_count = ... # type: Any
    features = ... # type: Any
    groups = ... # type: Any
    guid = ... # type: Any
    hostname = ... # type: str
    log_vdevs = ... # type: Any
    name: str = ...
    properties: Dict[str, ZFSProperty] = ...
    root = ... # type: Any
    root_dataset: ZFSDataset = ...
    root_vdev = ... # type: Any
    scrub = ... # type: Any
    spare_vdevs = ... # type: Any
    state = ... # type: Any
    status = ... # type: Any
    __pyx_vtable__ = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def attach_vdevs(self, *args, **kwargs): ...
    def clear(self, *args, **kwargs): ...
    def create(self, *args, **kwargs) -> None: ...
    def delete(self, *args, **kwargs) -> None: ...
    def start_scrub(self, *args, **kwargs): ...
    def stop_scrub(self, *args, **kwargs): ...
    def upgrade(self, *args, **kwargs): ...
    def vdev_by_guid(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSProperty:
    allowed_values = ... # type: Any
    dataset: ZFSDataset = ...
    name: str = ...
    parsed = ... # type: Any
    rawvalue = ... # type: Any
    source = ... # type: Any
    value: str = ...
    def __init__(self, *args, **kwargs): ...
    def inherit(self, *args, **kwargs): ...
    def refresh(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSPropertyDict(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, *args, **kwargs) -> ZFSProperty: ...
    def has_key(self, *args, **kwargs): ...
    def items(self, *args, **kwargs): ...
    def iterkeys(self, *args, **kwargs): ...
    def itervalues(self, *args, **kwargs): ...
    def keys(self, *args, **kwargs): ...
    def refresh(self) -> None: ...
    def setdefault(self, *args, **kwargs): ...
    def update(self, *args, **kwargs): ...
    def values(self, *args, **kwargs): ...
    def __contains__(self, *args, **kwargs): ...
    def __delitem__(self, *args, **kwargs): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __reduce__(self): ...
    def __setitem__(self, index, object): ...
    def __setstate__(self, state): ...

class ZFSSnapshot(ZFSObject):
    holds = ... # type: Any
    mountpoint: str = ...
    parent = ... # type: Any
    snapshot_name: str = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bookmark(self, *args, **kwargs): ...
    def clone(self, name: str, opts: Optional[Dict[str, str]]) -> None: ...
    def delete(self, *args, **kwargs) -> None: ...
    def hold(self, *args, **kwargs): ...
    def release(self, *args, **kwargs): ...
    def rollback(self, force: bool=False) -> None: ...
    def send(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSUserProperty(ZFSProperty):
    name: str = ...
    rawvalue = ... # type: Any
    source = ... # type: Any
    value: str = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSVdev:
    children = ... # type: Any
    disks = ... # type: Any
    group = ... # type: Any
    guid = ... # type: Any
    parent = ... # type: Any
    path = ... # type: Any
    root = ... # type: Any
    size = ... # type: Any
    stats = ... # type: Any
    status = ... # type: Any
    type = ... # type: Any
    zpool = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def add_child_vdev(self, *args, **kwargs): ...
    def attach(self, *args, **kwargs): ...
    def degrade(self, *args, **kwargs): ...
    def detach(self, *args, **kwargs): ...
    def fault(self, *args, **kwargs): ...
    def offline(self, *args, **kwargs): ...
    def online(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def replace(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZFSVdevStats:
    allocated = ... # type: Any
    bytes = ... # type: Any
    checksum_errors = ... # type: Any
    configured_ashift = ... # type: Any
    fragmentation = ... # type: Any
    logical_ashift = ... # type: Any
    ops = ... # type: Any
    physical_ashift = ... # type: Any
    read_errors = ... # type: Any
    size = ... # type: Any
    timestamp = ... # type: Any
    vdev = ... # type: Any
    write_errors = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZPoolFeature:
    description = ... # type: Any
    guid = ... # type: Any
    name: str = ...
    pool: ZFSPool = ...
    state = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def enable(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZPoolProperty:
    allowed_values = ... # type: Any
    name: str = ...
    parsed = ... # type: Any
    pool = ... # type: Any
    rawvalue = ... # type: Any
    source = ... # type: Any
    value: str = ...
    def __init__(self, *args, **kwargs): ...
    def reset(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZPoolScrub:
    bytes_scanned = ... # type: Any
    bytes_to_scan = ... # type: Any
    end_time = ... # type: Any
    errors = ... # type: Any
    function = ... # type: Any
    percentage = ... # type: Any
    pool = ... # type: Any
    root = ... # type: Any
    start_time = ... # type: Any
    stat = ... # type: Any
    state = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def __getstate__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ZfsConverter:
    __init__ = ... # type: Any
    to_native = ... # type: Any
    to_property = ... # type: Any

class datetime(date):
    fold = ... # type: Any
    hour = ... # type: Any
    max = ... # type: Any
    microsecond = ... # type: Any
    min = ... # type: Any
    minute = ... # type: Any
    resolution = ... # type: Any
    second = ... # type: Any
    tzinfo = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def astimezone(self, *args, **kwargs): ...
    @classmethod
    def combine(cls, *args, **kwargs): ...
    def ctime(self, *args, **kwargs): ...
    def date(self, *args, **kwargs): ...
    def dst(self, *args, **kwargs): ...
    @classmethod
    def fromtimestamp(cls, *args, **kwargs): ...
    def isoformat(self, *args, **kwargs): ...
    @classmethod
    def now(cls, *args, **kwargs): ...
    def replace(self, *args, **kwargs): ...
    @classmethod
    def strptime(cls, *args, **kwargs): ...
    def time(self, *args, **kwargs): ...
    def timestamp(self, *args, **kwargs): ...
    def timetuple(self, *args, **kwargs): ...
    def timetz(self, *args, **kwargs): ...
    def tzname(self, *args, **kwargs): ...
    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs): ...
    @classmethod
    def utcnow(cls, *args, **kwargs): ...
    def utcoffset(self, *args, **kwargs): ...
    def utctimetuple(self, *args, **kwargs): ...
    def __add__(self, other): ...
    def __eq__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __hash__(self): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
    def __ne__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self): ...
    def __reduce_ex__(self, proto): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...
